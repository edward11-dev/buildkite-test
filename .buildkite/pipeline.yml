env:
  NODE_ENV: "test"
  
steps:
  - group: "🔍 Code Quality"
    steps:
      - label: "📦 Install Dependencies"
        key: "install"
        command: |
          echo "--- 🖥️ Agent Environment Info"
          hostname
          whoami
          pwd
          echo "Node.js version: $(node --version)"
          echo "npm version: $(npm --version)"
          echo "--- 🔍 Before npm ci"
          ls -la
          echo "package.json exists: $(test -f package.json && echo 'YES' || echo 'NO')"
          echo "package-lock.json exists: $(test -f package-lock.json && echo 'YES' || echo 'NO')"
          echo "--- 📦 Installing dependencies"
          if [ -f package-lock.json ]; then
            echo "Using npm ci (lockfile found)"
            npm ci --verbose
          else
            echo "No lockfile found, using npm install"
            npm install --verbose
          fi
          echo "--- 🔍 After npm ci - checking what was installed"
          echo "node_modules exists: $(test -d node_modules && echo 'YES' || echo 'NO')"
          if [ -d node_modules ]; then
            echo "node_modules size: $(du -sh node_modules)"
            echo "Contents of node_modules/.bin:"
            ls -la node_modules/.bin/ | head -20
            echo "--- Checking specific packages"
            ls node_modules/.bin/ | grep -E "(jest|eslint)" || echo "Jest/ESLint binaries not found"
          else
            echo "❌ node_modules directory was not created!"
          fi
          echo "--- npm list output"
          npm list --depth=0 || echo "npm list failed"
        agents:
          queue: "default"

      - label: "🧹 Lint Code"
        key: "lint"
        depends_on: "install"
        command: |
          echo "--- 🔍 Full Agent Environment Debug"
          echo "Current working directory: $(pwd)"
          echo "Home directory: $HOME"
          echo "Build directory contents:"
          ls -la
          echo "--- Node.js Environment"
          echo "Node path: $(which node)"
          echo "npm path: $(which npm)"
          echo "npm global packages:"
          npm list -g --depth=0 2>/dev/null | head -5
          echo "--- Checking node_modules"
          if [ -d "node_modules" ]; then
            echo "node_modules exists, size: $(du -sh node_modules)"
            ls -la node_modules/.bin/ | head -10
            echo "ESLint in .bin:"
            ls -la node_modules/.bin/ | grep eslint || echo "No ESLint binary found"
          else
            echo "❌ node_modules directory not found!"
          fi
          echo "--- Package Dependencies"
          cat package.json | grep -A 10 -B 2 eslint
          echo "--- npm list eslint"
          npm list eslint || echo "ESLint not in dependencies"
          echo "--- Trying different ESLint methods"
          which eslint || echo "eslint not in global PATH"
          npx eslint --version || echo "npx eslint failed"
          echo "--- File permissions check"
          ls -la node_modules/.bin/eslint 2>/dev/null || echo "ESLint binary doesn't exist"
          echo "--- 🧹 Running ESLint"
          npm run lint
        agents:
          queue: "default"

      - label: "🧪 Run Tests"
        key: "test"
        depends_on: "install"
        command: |
          echo "--- 🔍 Finding Jest Installation"
          echo "Current directory: $(pwd)"
          echo "Checking Jest installation:"
          find node_modules -name "jest" -type d | head -5
          echo "Looking for Jest executable:"
          find node_modules -name "jest.js" -o -name "jest" | head -10
          echo "Checking Jest symlink:"
          if [ -L "./node_modules/.bin/jest" ]; then
            echo "Jest symlink exists, points to: $(readlink ./node_modules/.bin/jest)"
            echo "Resolving full path: $(readlink -f ./node_modules/.bin/jest 2>/dev/null || echo 'readlink failed')"
          fi
          echo "Checking npm bin directory:"
          npm config get prefix || echo "npm prefix failed"
          echo "NPM bin path should be: $(npm config get prefix)/bin"
          echo "PATH during build:"
          echo $PATH
          echo "--- 🔧 Adding node_modules/.bin to PATH"
          export PATH="$(pwd)/node_modules/.bin:$PATH"
          echo "Updated PATH: $PATH"
          echo "--- 🧪 Testing Jest directly"
          which jest || echo "Jest not found in PATH"
          jest --version 2>&1 || echo "Jest version check failed"
          echo "--- 🧪 Running test suite"
          npm test
        agents:
          queue: "default"
        artifact_paths:
          - "coverage/**/*"

  - wait: "~"

  - group: "🐳 Build & Security"
    steps:
      - label: "🐳 Build Docker Image"
        key: "build"
        command: |
          echo "--- 🐳 Building Docker image"
          export IMAGE_TAG="buildkite-test:$$BUILDKITE_COMMIT"
          docker build --target production -t $$IMAGE_TAG .
          
          echo "--- 🏷️ Tagging image"
          docker tag $$IMAGE_TAG buildkite-test:latest
          
          echo "--- 💾 Saving image for later steps"
          docker save $$IMAGE_TAG | gzip > image.tar.gz
        agents:
          queue: "default"
        artifact_paths:
          - "image.tar.gz"

      - label: "🔒 Security Scan"
        key: "security"
        depends_on: "build"
        command: |
          echo "--- 🔒 Loading Docker image"
          docker load < image.tar.gz
          
          echo "--- 🔍 Running security scan (Trivy)"
          # Install Trivy if not available
          if ! command -v trivy &> /dev/null; then
            echo "Installing Trivy..."
            if [[ "$(uname)" == "Darwin" ]]; then
              brew install aquasecurity/trivy/trivy
            else
              wget -qO- https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
            fi
          fi
          
          # Scan the image
          trivy image --exit-code 0 --no-progress --format table buildkite-test:$$BUILDKITE_COMMIT
        agents:
          queue: "default"
        allow_dependency_failure: true

  - wait: "~"

  - group: "🚀 Deploy"
    steps:
      - label: "🚀 Deploy to Staging"
        key: "deploy-staging"
        command: |
          echo "--- 🚀 Deploying to staging environment"
          docker load < image.tar.gz
          
          # Stop existing container if running
          docker stop buildkite-test-staging 2>/dev/null || true
          docker rm buildkite-test-staging 2>/dev/null || true
          
          # Run new container
          docker run -d \
            --name buildkite-test-staging \
            -p 3001:3000 \
            -e NODE_ENV=staging \
            buildkite-test:$$BUILDKITE_COMMIT
          
          echo "--- ⏳ Waiting for application to start"
          sleep 10
          
          echo "--- 🏥 Health check"
          curl -f http://localhost:3001/health || exit 1
          
          echo "✅ Staging deployment successful!"
          echo "🌐 Application available at: http://localhost:3001"
        agents:
          queue: "default"

      - block: "🎯 Deploy to Production?"
        prompt: "Deploy to production environment?"
        if: build.branch == "main"

      - label: "🌟 Deploy to Production"
        key: "deploy-production"
        depends_on: "deploy-staging"
        command: |
          echo "--- 🌟 Deploying to production environment"
          docker load < image.tar.gz
          
          # Stop existing container if running
          docker stop buildkite-test-prod 2>/dev/null || true
          docker rm buildkite-test-prod 2>/dev/null || true
          
          # Run new container
          docker run -d \
            --name buildkite-test-prod \
            -p 3000:3000 \
            -e NODE_ENV=production \
            buildkite-test:$$BUILDKITE_COMMIT
          
          echo "--- ⏳ Waiting for application to start"
          sleep 10
          
          echo "--- 🏥 Health check"
          curl -f http://localhost:3000/health || exit 1
          
          echo "✅ Production deployment successful!"
          echo "🌐 Application available at: http://localhost:3000"
        agents:
          queue: "default"
        if: build.branch == "main"

  - group: "📊 Post-Deploy"
    steps:
      - label: "🧪 Integration Tests"
        key: "integration-tests"
        depends_on: "deploy-staging"
        command: |
          echo "--- 🧪 Running integration tests against staging"
          
          # Basic API tests
          echo "Testing home endpoint..."
          curl -f http://localhost:3001/ | jq .
          
          echo "Testing users endpoint..."
          curl -f http://localhost:3001/api/users | jq .
          
          echo "Testing user creation..."
          curl -f -X POST http://localhost:3001/api/users \
            -H "Content-Type: application/json" \
            -d '{"name":"Test User","email":"test@example.com"}' | jq .
          
          echo "✅ Integration tests passed!"
        agents:
          queue: "default"

      - label: "📈 Performance Test"
        key: "performance"
        depends_on: "deploy-staging"
        command: |
          echo "--- 📈 Running basic performance test"
          
          # Install curl and time if needed
          which curl || (echo "curl not found" && exit 1)
          
          echo "Running 10 concurrent requests..."
          for i in {1..10}; do
            (curl -s http://localhost:3001/health > /dev/null && echo "Request $i: OK") &
          done
          wait
          
          echo "✅ Performance test completed!"
        agents:
          queue: "default"
        soft_fail: true